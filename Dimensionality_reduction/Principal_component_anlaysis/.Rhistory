source('C:/Machine_Learning_A_Z/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)/mycode/ann.R', echo=TRUE)
setwd("C:/Machine_Learning_A_Z/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)/mycode")
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
dataset = dataset[, 4:14]
# Creating dummy vars for categorical variables
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c("Female", "Male"),
labels = c(1, 2)))
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
training_set[, -11]
training_set[, -11] = scale(training_set[, -11])
test_set[, -11] = scale(test_set[, -11])
install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
h2o.predict(classifier, newdata = test_set[-11])
h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
cm = table(test_set[, 11], y_pred)
cm
(1533+204)/2000
h2o.shutdown()
h2o.shutdown(prompt = TRUE)
setwd("C:/Machine_Learning_A_Z/Part 9 - Dimensionality Reduction/Section 43 - Principal Component Analysis (PCA)/mycode")
# Importing the dataset
dataset = read.csv('Wine.csv')
View(dataset)
as.numeric(dataset$Purchased)
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
install.packages("caret")
# Applying PCA
library(e1071)
library(caret)
pca = preProcess(x = training_set[-14],
method = "pca",
pcaComp = 2)
training_set = predict(pca, training_set)
training_set[c(2, 3, 1)]
training_set = training_set[c(2, 3, 1)]
View(training_set)
View(test_set)
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
View(test_set)
View(test_set)
# Fitting Logistic Regression to the Training set
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
library(ElemStatLearn)
